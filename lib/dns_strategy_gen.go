// Code generated by "enumer -type=DNSStrategy -transform=kebab -trimprefix DNS -output dns_strategy_gen.go"; DO NOT EDIT.

//
package lib

import (
	"fmt"
)

const _DNSStrategyName = "firstround-robinrandom"

var _DNSStrategyIndex = [...]uint8{0, 5, 16, 22}

func (i DNSStrategy) String() string {
	i -= 1
	if i >= DNSStrategy(len(_DNSStrategyIndex)-1) {
		return fmt.Sprintf("DNSStrategy(%d)", i+1)
	}
	return _DNSStrategyName[_DNSStrategyIndex[i]:_DNSStrategyIndex[i+1]]
}

var _DNSStrategyValues = []DNSStrategy{1, 2, 3}

var _DNSStrategyNameToValueMap = map[string]DNSStrategy{
	_DNSStrategyName[0:5]:   1,
	_DNSStrategyName[5:16]:  2,
	_DNSStrategyName[16:22]: 3,
}

// DNSStrategyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DNSStrategyString(s string) (DNSStrategy, error) {
	if val, ok := _DNSStrategyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DNSStrategy values", s)
}

// DNSStrategyValues returns all values of the enum
func DNSStrategyValues() []DNSStrategy {
	return _DNSStrategyValues
}

// IsADNSStrategy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DNSStrategy) IsADNSStrategy() bool {
	for _, v := range _DNSStrategyValues {
		if i == v {
			return true
		}
	}
	return false
}
